name: ci 
on:
  push:
    branches:
      - main
permissions:
  contents: write
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV 
      - uses: actions/cache@v3
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-
      - run: pip install mkdocs-material
      # install additional dependencies here
      - name: Install additional dependencies
        run: |
          pip install -r requirements.txt
          npm install -g @marp-team/marp-cli

      - name: Build Marp Presentations
        run: |
          # Create directory for presentations
          mkdir -p docs/assets/slides

          # Process each markdown file individually
          for file in $(find docs -type f -name "*.md"); do
            # Check if file contains marp: true
            if grep -q "marp: true" "$file"; then
              echo "Building presentation from $file"
              filename=$(basename "$file" .md)
              dirname=$(dirname "$file")
              relative_path=${dirname#docs/}
              output_pdf="docs/assets/slides/${relative_path}/${filename}.pdf"
              
              # Create output directory if it doesn't exist
              mkdir -p "$(dirname "$output_pdf")"
              
              # Convert to PDF
              marp --pdf --allow-local-files "$file" -o "$output_pdf"
              
              # Calculate relative path for the link
              relative_link_path="assets/slides/${relative_path}/${filename}.pdf"
              # Add download link to the markdown file if it doesn't exist already
              if ! grep -q "Download Presentation" "$file"; then
                echo -e "\n[Download Presentation](/${relative_link_path}){: .md-button }" >> "$file"
              fi
            fi
          done

      - run: mkdocs gh-deploy --force

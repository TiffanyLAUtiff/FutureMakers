name: ci 
on:
  push:
    branches:
      - main
permissions:
  contents: write
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV 
      - uses: actions/cache@v3
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-
      - run: pip install mkdocs-material
      - name: Install additional dependencies
        run: |
          pip install -r requirements.txt
          npm install -g @marp-team/marp-cli

      - name: Build Marp Presentations
        run: |
          # Create directory for presentations
          mkdir -p docs/assets/slides

          # Process each markdown file individually
          for file in $(find docs -type f -name "*.md"); do
            # Check if file contains marp: true
            if grep -q "marp: true" "$file"; then
              echo "Building presentation from $file"
              filename=$(basename "$file" .md)
              dirname=$(dirname "$file")
              relative_path=${dirname#docs/}
              output_base="docs/assets/slides/${relative_path}/${filename}"
              
              # Create output directory if it doesn't exist
              mkdir -p "$(dirname "$output_base")"
              
              # Convert to PDF and PPTX
              marp --pdf --allow-local-files "$file" -o "${output_base}.pdf"
              marp --pptx --allow-local-files "$file" -o "${output_base}.pptx"
              
              # Calculate relative path for the links
              depth=$(echo "$relative_path" | tr -cd '/' | wc -c)
              prefix=""
              for ((i=0; i<depth+1; i++)); do
                prefix="../$prefix"
              done
              
              pdf_link_path="${prefix}assets/slides/${relative_path}/${filename}.pdf"
              pptx_link_path="${prefix}assets/slides/${relative_path}/${filename}.pptx"
              
              # Add download links to the markdown file if they don't exist already
              if ! grep -q "Download Presentation" "$file"; then
                echo -e "\n## Download Presentation\n" >> "$file"
                echo -e "[Download PDF](${pdf_link_path}){: .md-button }" >> "$file"
                echo -e "[Download PPTX](${pptx_link_path}){: .md-button }" >> "$file"
              fi
            fi
          done

      - run: mkdocs gh-deploy --force
